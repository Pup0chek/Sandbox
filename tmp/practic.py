"""Практика на тестирование."""


# Задание
# -----------
task = """
Провести тестирование функции,
которая рассчитывает значения для двух математических функций,
в зависимости от варианта (по номеру в списке группы).

Функция рассчитывает значение y на основе x и n,
где n - граничное значение, при x < n используется расчёт y по левой функции,
иначе по правой функции

Функция не должна внутри проводить проверку корректности входных параметров.

Нужно написать два варианта теста:
- с использованием doctest
- с использованием unittest

Тесты должны проверить (оба варианта):
- "чувствительные" точки.
- случай, если на вход будут поданы нечисловые данные.

Для doctest:
В тестах должен присутствовать тест, проверяющий сразу несколько значений.

Для unittest:
Тесты unittest должны быть в отдельном файле.
В тестах должен использоваться subTest() в цикле

Напишите функцию (тестировать не нужно), которая построит графики для трёх разных n

Проверьте покрытие тестов для unittest. При сдаче покажите текствовый и html отчёты.
Проводите тестирование из командной строки.

"""

# Варианты
# ----------
vars = """
Левая функция.
1. sin
2. tg
3. x^2
4. ax + b
5. log
6. sqrt
7. 1/x
8. cos
9. n * log(n)

Правая функция
1. x^3 + a
2. ax + sqrt(x)
3. log(x)^2
4. tg + 1/x
5. cos + ax
6. sin + x^2

Номер по списку
1. 1 - 1
2. 1 - 2
3. 1 - 3
4. 1 - 4
5. 2 - 1
6. 2 - 2
7. 2 - 3
8. 2 - 4
9. 2 - 5
10. 3 - 2
11. 3 - 3
12. 3 - 4
13. 3 - 5
14. 3 - 6
15. 4 - 6
16. 4 - 5
17. 4 - 4
18. 4 - 3
19. 5 - 4
20. 5 - 5
21. 6 - 5
22. 6 - 6
23. 6 - 3
24. 6 - 2
25. 7 - 1
26. 7 - 3
27. 7 - 5
28. 8 - 1
29. 8 - 2
30. 8 - 3
31. 9 - 6
32. 9 - 5
33. 9 - 4
34. 9 - 2
35. 9 - 1
36. 5 - 6
37. 5 - 2
38. 7 - 2
39. 7 - 6

"""

# Шаблон
# ----------

def func(x, n):
    """Описание.
    ДОКТЕСТ
    """
    if x < n:
        return x  # мат. функция 1 (левая)
    else:
        return 2 * x  # мат. функция 2 (правая)


if __name__ == '__main__':
    func(12, 12)
