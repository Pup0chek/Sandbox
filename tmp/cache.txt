from math import factorial
from functools import wraps

def memorized(func):
    cache = {}
    @wraps
    def wrapper(foo:int):
        key = str(foo)
        if key not in cache:
            cache[key] = func(foo)
            return cache[key]
        else:
            return cache[key]
    


@memorized
def my_func_memorized(foo: int):
    factorial(foo)

my_func = lambda *args: object
my_func_memorized = memorized(my_func)

print(my_func_memorized(12))
print(my_func_memorized(12)) # возвращает 12 из кэша