import json
from concurrent.futures import ThreadPoolExecutor
from queue import Queue
from pathlib import Path
from typing import Any, Dict, List

FILES_INFO: List[Dict[str, Any]] = [
    {
        "group": 1,
        "L": 1,
        "filename": "17_1_1.json",
        "reverse": False
    },
    {
        "group": 2,
        "L": 2,
        "filename": "17_2_2.json",
        "reverse": True
    }
]

queues: Dict[int, Queue] = {group_info["group"]: Queue() for group_info in FILES_INFO}

def load_data(file_path: Path) -> List[Any]:
    if not file_path.exists():
        print(f"Файл {file_path} не найден.")
        return []
    try:
        with file_path.open('r', encoding='utf-8') as f:
            return json.load(f)
    except json.JSONDecodeError as e:
        print(f"Ошибка чтения JSON из файла {file_path}: {e}")
        return []

def process_group(group_info: Dict[str, Any]) -> None:
    group_number = group_info["group"]
    reverse = group_info["reverse"]
    filename = Path(group_info["filename"])

    data = load_data(filename)
    if not data:
        return

    sorted_data = sorted(data, key=lambda x: x[0])

    if reverse:
        sorted_data = [[n, s[::-1]] for n, s in sorted_data if isinstance(s, str)]

    for record in sorted_data:
        queues[group_number].put(record[1])

def main() -> None:
    with ThreadPoolExecutor(max_workers=len(FILES_INFO)) as executor:
        executor.map(process_group, FILES_INFO)

    groups = {group_info["group"]: group_info for group_info in FILES_INFO}
    # while not queues[1].empty():
    #     print(queues[1].get())
    # print("\(T_T)/")
    # while not queues[2].empty():
    #     print(queues[2].get())
    # print("\(T_T)/")
    while any(not q.empty() for q in queues.values()):

        for group_number, group_info in sorted(groups.items()):
            L = group_info["L"]
            q = queues[group_number]
            for _ in range(L):
                if not q.empty():
                    print(q.get())
                else:
                    break
    # print("\(T_T)/")
    # while not queues[2].empty():
    #     print(queues[2].get())
    # print("(T_T)")

if __name__ == "__main__":
    main()
