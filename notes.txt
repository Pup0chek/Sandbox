Вот структура проекта для реализации песочницы для анализа вредоносных файлов с пользовательским интерфейсом на PyQt:

1. Основная структура проекта
graphql
Копировать код
malware_sandbox/
├── app/
│   ├── __init__.py
│   ├── main.py              # Точка входа для запуска приложения
│   ├── ui/                  # Папка для пользовательского интерфейса
│   │   ├── main_window.ui   # Основное окно (Qt Designer)
│   │   ├── resources.qrc    # Ресурсы (иконки, изображения)
│   │   ├── styles.qss       # Стилизация интерфейса
│   ├── widgets/             # Кастомные виджеты или дополнительные окна
│   │   ├── file_viewer.py   # Виджет для просмотра метаданных
│   │   ├── log_viewer.py    # Виджет для отображения логов
│   │   ├── dynamic_analysis_viewer.py # Виджет для динамического анализа
├── core/                    # Логика песочницы
│   ├── __init__.py
│   ├── file_metadata.py     # Извлечение метаданных
│   ├── signature_check.py   # Работа с API антивирусов
│   ├── dynamic_analysis.py  # Модуль для анализа поведения
│   ├── utils.py             # Общие утилиты
├── db/                      # Хранилище данных
│   ├── database.py          # Подключение к SQLite
│   ├── schema.sql           # Структура базы данных
├── tests/                   # Тесты
│   ├── test_file_metadata.py
│   ├── test_signature_check.py
│   ├── test_dynamic_analysis.py
├── requirements.txt         # Список зависимостей
├── README.md                # Описание проекта
└── setup.py                 # Скрипт установки проекта
2. Модули и их назначение
2.1 app/
main.py:
Запускает приложение.
Инициализирует основной интерфейс с помощью PyQt.
ui/
main_window.ui: Созданный с помощью Qt Designer интерфейс.
resources.qrc: Файл с ресурсами (иконки, изображения), используется для улучшения интерфейса.
styles.qss: CSS-стилизация для виджетов PyQt.
widgets/
file_viewer.py: Виджет для отображения метаданных файлов.
log_viewer.py: Для просмотра журналов операций.
dynamic_analysis_viewer.py: Для отображения результатов динамического анализа.
2.2 core/
file_metadata.py:
Использует pefile для извлечения метаданных из PE-файлов.
Поддержка других форматов (например, docx через python-docx).
Генерация хэшей файла (MD5, SHA256) с помощью hashlib.
signature_check.py:
Интеграция с антивирусными API (VirusTotal, Hybrid Analysis).
Отправка хэшей или файлов для проверки.
Обработка ответа от API.
dynamic_analysis.py:
Эмуляция выполнения файлов в изолированной среде (используя, например, subprocess).
Логирование:
Созданные процессы.
Чтение/запись файлов.
Сетевые запросы.
utils.py:
Общие функции, такие как чтение/запись конфигурации, обработка исключений и логирование.
2.3 db/
database.py:
Управление SQLite базой данных.
Сохранение результатов анализа (метаданные, результаты проверки сигнатур, динамический анализ).
schema.sql:
SQL-скрипт для создания таблиц:
Таблица для метаданных.
Таблица для логов динамического анализа.
Таблица для сигнатурных проверок.
3. Пользовательский интерфейс
Основное окно (main_window.ui):

Поля для загрузки файла.
Таблицы или текстовые области для отображения:
Метаданных.
Результатов сигнатурной проверки.
Логов динамического анализа.
Кнопки:
Запуск анализа.
Экспорт результатов.
Окна/Виджеты:

File Viewer:
Отображает информацию о загруженном файле (размер, хэши, сигнатуры).
Dynamic Analysis Viewer:
Логирует поведение файла (процессы, сетевые подключения).
Log Viewer:
Показывает общий журнал работы.
4. Основной функционал
Извлечение метаданных:

Поддержка форматов .exe, .docx, .pdf и других.
Использование pefile для PE-файлов.
Вычисление хэшей с помощью hashlib.
Сигнатурный анализ:

Проверка хэша или загрузка файла в VirusTotal.
Анализ результатов ответа (например, количество срабатываний антивирусов).
Динамический анализ:

Эмуляция запуска файла (например, в subprocess).
Мониторинг:
Процессов через psutil.
Сетевых запросов через socket или перехват с помощью прокси.
Файловой активности через os или библиотеки наподобие watchdog.
5. Впечатляющий функционал
Расширение форматов:
Поддержка анализа форматов Office, PDF и других популярных типов файлов.
Интеграция с API:
VirusTotal (для анализа сигнатур).
Hybrid Analysis (для динамического анализа).
Дашборд:
Встроенный графический интерфейс с графиками (например, распределение атак по времени).
Уведомления:
Telegram-бот или email для уведомления о результатах анализа.
6. Стек технологий
Основные библиотеки:

pefile — для работы с PE-файлами.
hashlib — для вычисления хэшей.
requests — для работы с внешними API.
psutil — для мониторинга процессов.
sqlite3 — для управления базой данных.
pyqt5 или pyqt6 — для пользовательского интерфейса.
Среда разработки:

Использование виртуальных машин или контейнеров (например, Docker) для создания изолированной среды.
7. Этапы разработки
Настройка базового проекта.
Реализация извлечения метаданных и хэширования.
Интеграция с антивирусными API.
Добавление динамического анализа.
Разработка пользовательского интерфейса.
Оптимизация и тестирование.
Добавление дополнительных функций (например, уведомлений).
Эта структура позволит организовать разработку проекта, начиная с базового функционала и добавляя более сложные компоненты.




